import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.functionscore.script.ScriptScoreFunctionBuilder;
import org.elasticsearch.script.Script;
import org.elasticsearch.script.ScriptService.ScriptType;
import org.elasticsearch.search.SearchHits;

public class RetrievalModels {

	public static HashMap<Integer, String> queryMap = new HashMap<Integer, String>();

	public static void calculateOkapitTF()
	{

	}


	public static void calculateTDIDF()
	{

	}
	
	public static void getTF(Client client,String word)
	{
		
		final Map<String, Object> params = new HashMap<>();
		params.put("term", word);
		params.put("field", "text");

		SearchResponse response = client.prepareSearch("ap_dataset")
				.setTypes("document")
				.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
				.setQuery(QueryBuilders.functionScoreQuery
						(QueryBuilders.termQuery("text", word), 
								new ScriptScoreFunctionBuilder(new Script("getTF", 
										ScriptType.INDEXED, "groovy", params)))
						.boostMode("replace"))
				.setFrom(0)
				.setSize(10000)
				.execute()
				.actionGet();
		SearchHits hits = response.getHits();
		
		client.close();
	}
	
	public void getDF(){
		
	}
	
	public static Client elasticSearchClient() throws UnknownHostException
	{
		Client client = TransportClient.builder().build().addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("host1"), 9300));
		return client;
	}

	public static void readQueriesFile(File queryFile) throws NumberFormatException, IOException
	{
		String line = "";
		BufferedReader bf = new BufferedReader(new FileReader(queryFile));
		while((line = bf.readLine()) != null)
		{
			String key = line.substring(0, 5).trim();

			key = key.replaceAll("[^\\w\\s]","");

			Integer keyInt = Integer.parseInt(key);
			queryMap.put(keyInt, line.substring(6));
		}

	}

	public static void main(String args[])
	{
		//Read each line in the given Query file

		String queryFileName = "C:\\Users\\kaush_000\\Desktop\\IR\\AP89_DATA\\AP_DATA\\query_desc.51-100.short.txt";

		try
		{
			File queryFile = new File(queryFileName);
			if(queryFile.exists())
			{
				readQueriesFile(queryFile);
				
				Client client = elasticSearchClient();
			
			
				
			}
			else
				System.out.println("File "+queryFileName+" doesn't exist");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		

	}
}
